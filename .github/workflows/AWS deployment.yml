name: Backend AWS deployment
on:
  push:
    branches:
      - aws
    paths:
      - 'server/**'

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: rt2-backend
  ECS_SERVICE: rt2-cluster-service
  ECS_CLUSTER: rt2-backend-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: rt2-backend-image

permissions:
  id-token: write
  contents: read

jobs:
  compile_typescript:
    name: Compile Typescript to /dist
    defaults:
      run:
        working-directory: ./server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Server Deps
        run: npm ci

      - name: Build Server
        run: npm run build

      - name: Copy package.json to /dist
        run: cp package.json dist/package.json

      - name: Copy package-lock.json to /dist
        run: cp package-lock.json dist/package-lock.json

      - name: Upload /dist as artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist-artifact
          path: ./server/dist

  build_docker_img:
    name: Build docker image and Deploy
    defaults:
      run:
        working-directory: .
    runs-on: ubuntu-latest
    needs: compile_typescript
    steps:
      - name: Download /dist artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-artifact
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true